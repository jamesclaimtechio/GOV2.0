// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id    String @id @default(cuid())
  name  String @db.VarChar(255)

  users       User[]
  assessments Assessment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("organizations")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique @db.VarChar(255)
  passwordHash String?  @db.VarChar(255)
  name         String?  @db.VarChar(255)
  role         UserRole @default(VIEWER)
  orgId        String

  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  auditLogs    AuditLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Assessment {
  id     String           @id @default(cuid())
  name   String           @db.VarChar(255)
  status AssessmentStatus @default(DRAFT)
  orgId  String

  organization    Organization     @relation(fields: [orgId], references: [id], onDelete: Cascade)
  scopeResponse   ScopeResponse?
  documents       Document[]
  complianceMap   ComplianceMap?
  findings        Finding[]
  conflicts       Conflict[]
  tasks           Task[]
  auditLogs       AuditLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("assessments")
}

model ScopeResponse {
  id           String   @id @default(cuid())
  assessmentId String   @unique
  answers      Json     // Raw form answers
  jurisdictions String[] // Derived jurisdictions
  regulators   String[] // Derived regulatory bodies
  frameworks   String[] // Applicable frameworks
  rationale    Json     // Justification for derivations

  assessment Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("scope_responses")
}

model Document {
  id           String       @id @default(cuid())
  assessmentId String
  type         DocumentType
  originalName String       @db.VarChar(255)
  storageUrl   String       @db.VarChar(512)
  checksum     String       @db.VarChar(64)
  sizeBytes    Int

  assessment Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("documents")
}

model ComplianceMap {
  id           String @id @default(cuid())
  assessmentId String @unique
  data         Json   // Structured compliance data

  assessment Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("compliance_maps")
}

model Framework {
  id           String @id @default(cuid())
  code         String @unique @db.VarChar(50) // e.g., "GDPR", "ISO27001"
  name         String @db.VarChar(255)
  version      String @db.VarChar(50)
  description  String?
  isActive     Boolean @default(true)

  requirements Requirement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("frameworks")
}

model Requirement {
  id          String   @id @default(cuid())
  frameworkId String
  ref         String   @db.VarChar(100) // e.g., "Art. 30", "A.5.1.1"
  text        String   @db.Text
  tags        String[]
  category    String?  @db.VarChar(100)

  framework Framework  @relation(fields: [frameworkId], references: [id], onDelete: Cascade)
  findings  Finding[]
  conflicts ConflictRequirement[]
  tasks     Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([frameworkId, ref])
  @@map("requirements")
}

model Finding {
  id            String        @id @default(cuid())
  assessmentId  String
  requirementId String
  status        FindingStatus
  rationale     String        @db.Text
  evidence      Json          // Links to documents, notes, etc.
  confidence    Float?        @db.Real // AI confidence score 0-1

  assessment  Assessment  @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  requirement Requirement @relation(fields: [requirementId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([assessmentId, requirementId])
  @@map("findings")
}

model Conflict {
  id           String        @id @default(cuid())
  assessmentId String
  summary      String        @db.VarChar(500)
  description  String        @db.Text
  impact       ConflictImpact
  mitigations  Json          // Array of mitigation options

  assessment   Assessment             @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  requirements ConflictRequirement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("conflicts")
}

model ConflictRequirement {
  conflictId    String
  requirementId String

  conflict    Conflict    @relation(fields: [conflictId], references: [id], onDelete: Cascade)
  requirement Requirement @relation(fields: [requirementId], references: [id], onDelete: Cascade)

  @@id([conflictId, requirementId])
  @@map("conflict_requirements")
}

model Task {
  id            String     @id @default(cuid())
  assessmentId  String
  requirementId String?
  title         String     @db.VarChar(255)
  description   String     @db.Text
  ownerRole     UserRole
  dueAt         DateTime?
  status        TaskStatus @default(OPEN)
  priority      TaskPriority @default(MEDIUM)

  assessment  Assessment   @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  requirement Requirement? @relation(fields: [requirementId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tasks")
}

model AuditLog {
  id           String    @id @default(cuid())
  assessmentId String?
  actorId      String?
  action       String    @db.VarChar(100)
  entityType   String?   @db.VarChar(50)
  entityId     String?
  data         Json?
  ipAddress    String?   @db.VarChar(45)
  userAgent    String?   @db.VarChar(500)

  assessment Assessment? @relation(fields: [assessmentId], references: [id], onDelete: SetNull)
  actor      User?       @relation(fields: [actorId], references: [id], onDelete: SetNull)

  timestamp DateTime @default(now())

  @@map("audit_logs")
}

// Enums
enum UserRole {
  ADMIN
  COMPLIANCE_LEAD
  CONTROL_OWNER
  VIEWER
}

enum AssessmentStatus {
  DRAFT
  IN_PROGRESS
  REVIEW
  COMPLETED
  ARCHIVED
}

enum DocumentType {
  POLICY
  PROCEDURE
  EVIDENCE
  REPORT
  OTHER
}

enum FindingStatus {
  MEETS
  PARTIAL
  MISSING
  UNCLEAR
}

enum ConflictImpact {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum TaskStatus {
  OPEN
  IN_PROGRESS
  BLOCKED
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
